<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://shardingsphere.io/schema/shardingsphere/sharding
                        http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
        <property name="typeAliasesPackage" value="com.ypsx.store.core.entity"/>
        <property name="mapperLocations" value="classpath:/mappers/**/*.xml"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
        <property name="vfs" value="org.mybatis.spring.boot.autoconfigure.SpringBootVFS"/>
    </bean>

    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.ypsx.event.dao"/>
    </bean>
    <!-- 定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource"/>
    </bean>


    <!-- 数据源配置, 使用 Druid 数据库连接池 -->
    <bean id="ds0" name="ds0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          primary="true">
        <property name="url" value="${databse0.url}"/>
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <property name="driverClassName" value="${mysql.driver-class-name}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="0"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用。获取链接的时候，不校验是否可用，开启会有损性能-->
        <property name="testOnBorrow" value="true"/>
        <!-- 归还链接到连接池的时候校验链接是否可用 -->
        <property name="testOnReturn" value="false"/>
        <!-- 此项配置为true即可，不影响性能，并且保证安全性。意义为：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 链接使用超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制时间（单位秒），目前为5分钟，如果有业务处理时间超过5分钟，可以适当调整。 -->
        <property name="removeAbandonedTimeout" value="300"/>
    </bean>

    <!-- 数据源配置, 使用 Druid 数据库连接池 -->
    <bean id="ds1" name="ds1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          primary="false">
        <property name="url" value="${databse1.url}"/>
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>
        <property name="driverClassName" value="${mysql.driver-class-name}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="0"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用。获取链接的时候，不校验是否可用，开启会有损性能-->
        <property name="testOnBorrow" value="true"/>
        <!-- 归还链接到连接池的时候校验链接是否可用 -->
        <property name="testOnReturn" value="false"/>
        <!-- 此项配置为true即可，不影响性能，并且保证安全性。意义为：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 链接使用超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制时间（单位秒），目前为5分钟，如果有业务处理时间超过5分钟，可以适当调整。 -->
        <property name="removeAbandonedTimeout" value="300"/>
    </bean>


    <!-- 定义分库策略-->
    <sharding:standard-strategy id="databaseShardingStrategy" sharding-column="biz_id"
                                precise-algorithm-ref="preciseDataBaseAlgorithm"/>
    <!-- 定义分表策略-->
    <sharding:standard-strategy id="tableShardingStrategy" sharding-column="biz_id"
                                precise-algorithm-ref="preciseTableAlgorithm"/>
    <!-- 定义hint分库策略-->
    <sharding:hint-strategy id="databaseHintStrategy" algorithm-ref="hintDataBaseAlgorithm" />

    <!-- 定义hint分表策略-->
    <sharding:hint-strategy id="tableHintStrategy" algorithm-ref="hintTableAlgorithm"/>


    <sharding:data-source id="shardingDataSource">
        <sharding:sharding-rule data-source-names="ds0,ds1" default-data-source-name="ds0">
            <sharding:table-rules>
                <sharding:table-rule logic-table="event" actual-data-nodes="ds$->{0..1}.event_$->{0..1}"
                                     database-strategy-ref="databaseHintStrategy"
                                     table-strategy-ref="tableHintStrategy"/>
                <sharding:table-rule logic-table="event_log" actual-data-nodes="ds$->{0..1}.event_log_$->{0..1}"
                                     database-strategy-ref="databaseHintStrategy"
                                     table-strategy-ref="tableHintStrategy"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>
</beans>